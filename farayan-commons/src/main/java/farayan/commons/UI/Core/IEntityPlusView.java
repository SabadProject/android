package farayan.commons.UI.Core;

import java.util.List;

import farayan.commons.QueryBuilderCore.IEntity;

/**
 * ابزاری که این اینترفیس را پیاده‌سازی می‌کند ابزاریست که
 * قرار است موجودیت مرتبط پر شده را از میان همه‌ی موجودیت‌های کش‌شده براساس موجودیت خالی، پیدا کند
 * اگر نسخه‌ی پرشده‌ای پیدا نشود، نسخه‌ی خالی را نشان می‌دهد تا کاربر نسخه‌ی پرشده را ایجاد کند
 * مثال
 * <p>
 * در برنامه‌ی اول مقایسه سپس انتخاب، به ازای هر گروه تعدادی ملاک داریم و به ازای هر کالا، تعدادی ملاک پرشده داریم
 * حال می‌خواهیم به کاربر
 * ۱. ملاک‌های پرشده را نشان دهیم تا کاربر ضمن دیدن مقدار فعلی، مقدار مورد نظر را درج کند
 * ۲. ملاک‌های پرنشده را هم نشان دهیم تا کاربر مقدار مدنظرش را درج کند
 * برای این منظور کل ملاک‌های گروه را بارگذاری می‌کنیم، سپس ملاک‌های پرشده‌ی کالا را بارگذاری می‌کنیم
 * در نهایت فهرستی از ملاک‌های گروه ایجاد می‌کنیم، ملاک خالی را به همراه فهرست ملاک‌های پرشده برایش می‌فرستیم
 * ابزار بایستی براساس ملاک خالی، ملاک پرشده را کشف و نمایش دهد
 * اگر ملاک پرشده پیدا نشد، ملاک خالی را نشان دهد
 * <p>
 * ---
 * علاوه بر توضیحات بالا، چون کاربردهای دیگری هم به این اینترفیس افزوده شد، به جای اینکه نوع دوم حتما فهرستی از موجودیت‌های پرشده باشد، هر نوعی می‌تواند باشد
 */
public interface IEntityPlusView<TEntity extends IEntity, TPlus>
{
	void DisplayEntity(TEntity entity, TPlus plus);
}
