CREATE TABLE IF NOT EXISTS item (
    id INTEGER PRIMARY KEY,
    categoryId INTEGER NOT NULL,
    productId INTEGER NOT NULL,
    quantity TEXT NOT NULL,
    unitId INTEGER,
    packageWorth TEXT,
    packageUnit Text,
    currency TEXT,
    fee TEXT,
    discount TEXT,
    total TEXT,
    invoiceId INTEGER,
    updated INTEGER NOT NULL,
    deleted INTEGER
);

current:
SELECT * FROM item WHERE invoiceId IS NULL AND productId = :productId;

create:
INSERT INTO item
    ( categoryId, productId, quantity, unitId, currency, fee, discount, total, packageWorth, packageUnit, updated) VALUES
    (:categoryId,:productId,:quantity,:unitId,:currency,:fee,:discount,:total,:packageWorth,:packageUnit, unixepoch());

created:
SELECT * FROM item WHERE id = last_insert_rowid();

checkout:
UPDATE item SET invoiceId = :invoiceId WHERE invoiceId IS NULL;

byId:
SELECT * FROM item WHERE id = :id;

byInvoice:
SELECT * FROM item WHERE invoiceId = :invoiceId;

all:
SELECT * FROM item;

update:
UPDATE item SET quantity=:quantity, unitId=:unitId, currency=:currency, fee=:fee, discount=:discount, total=:total, packageWorth=:packageWorth,packageUnit=:packageUnit WHERE id = ?;

byProductAndNullInvoice:
SELECT * FROM item WHERE productId = :productId AND invoiceId IS NULL;

pickings:
SELECT * FROM item WHERE invoiceId IS NULL;

delete:
DELETE FROM item WHERE id = ?;

itemSummaryReport:
SELECT SUM(quantity) AS quantitySum, SUM(total) AS totalSum, currency FROM item WHERE invoiceId IS NULL GROUP BY currency;

currentCurrency:
SELECT currency FROM item WHERE invoiceId IS NULL AND currency IS NOT NULL GROUP BY currency;
