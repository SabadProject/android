import kotlin.Boolean;
import kotlin.Int;

CREATE TABLE IF NOT EXISTS category (
    id INTEGER PRIMARY KEY,
    displayableName TEXT NOT NULL,
    queryableName TEXT NOT NULL,
    displayableDescription TEXT NOT NULL,
    queryableDescription TEXT NOT NULL,
    needed INTEGER AS Boolean NOT NULL,
    deleted TEXT, --TODO
    picked INTEGER AS Boolean NOT NULL,
    position INTEGER NOT NULL
);

insert:
INSERT OR REPLACE INTO category VALUES ?;

create:
INSERT INTO category (
    displayableName,
    queryableName,
    displayableDescription,
    queryableDescription,
    needed,
    deleted,
    picked,
    position
) VALUES(
    :displayableName,
    :queryableName,
    :displayableDescription,
    :queryableDescription,
    :needed,
    NULL,
    0,
    :position
);

created:
SELECT * FROM category WHERE id = last_insert_rowid();

byName:
SELECT * FROM category WHERE queryableName = :queryableName AND deleted IS NULL;

all:
SELECT * FROM category WHERE deleted IS NULL ORDER BY picked ASC, needed DESC, position ASC;

changeNeeded:
UPDATE category SET needed=:needed WHERE id = :categoryId;

updateName:
UPDATE category SET displayableName=:displayableName, queryableName=:queryableName WHERE id = :categoryId;

byId:
SELECT * FROM category WHERE id =:id;

filter:
SELECT * FROM category
WHERE deleted IS NULL AND (queryableName LIKE :queryableName OR (:queryableName IS NULL OR LENGTH(:queryableName) = 0))
ORDER BY picked ASC, needed DESC, position ASC;

pickedCategoriesCount:
SELECT count(*) FROM category WHERE deleted IS NULL AND needed = 1 AND id IN (SELECT categoryId FROM item WHERE invoiceId IS NULL);

remainedCategoriesCount:
SELECT count(*) FROM category WHERE deleted IS NULL AND needed = 1 AND id NOT IN (SELECT categoryId FROM item WHERE invoiceId IS NULL);

softDelete:
UPDATE category SET deleted = :deleted WHERE id IN :ids;

hardDelete:
DELETE FROM category WHERE id IN :ids;

summaryReport:
SELECT count(*) FROM category WHERE deleted IS NULL AND needed = 1 AND id IN (SELECT categoryId FROM item WHERE invoiceId IS NULL)
UNION
SELECT count(*) FROM category WHERE deleted IS NULL AND needed = 1 AND id NOT IN (SELECT categoryId FROM item WHERE invoiceId IS NULL);