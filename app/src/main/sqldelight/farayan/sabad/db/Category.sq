import kotlin.Boolean;
import kotlin.Int;

CREATE TABLE IF NOT EXISTS category (
    id INTEGER PRIMARY KEY,
    displayableName TEXT NOT NULL,
    queryableName TEXT NOT NULL,
    displayableDescription TEXT NOT NULL,
    queryableDescription TEXT NOT NULL,
    needed INTEGER AS Boolean NOT NULL,
    picked INTEGER AS Boolean NOT NULL,
    position INTEGER NOT NULL,
    updated INTEGER NOT NULL,
    deleted INTEGER
);

create:
INSERT INTO category (
    displayableName,
    queryableName,
    displayableDescription,
    queryableDescription,
    needed,
    picked,
    position,
    updated
) VALUES(
    :displayableName,
    :queryableName,
    :displayableDescription,
    :queryableDescription,
    :needed,
    0,
    :position,
    unixepoch()
);

created:
SELECT * FROM category WHERE id = last_insert_rowid();

byName:
SELECT * FROM category WHERE queryableName = :queryableName AND deleted IS NULL;

all:
SELECT * FROM category WHERE deleted IS NULL ORDER BY picked ASC, needed DESC, position ASC;

changeNeeded:
UPDATE category SET needed=:needed, updated = unixepoch() WHERE id = :categoryId;

updateName:
UPDATE category SET displayableName=:displayableName, queryableName=:queryableName, updated = unixepoch() WHERE id = :categoryId;

byId:
SELECT * FROM category WHERE id =:id;

filter:
SELECT * FROM category
WHERE deleted IS NULL AND (queryableName LIKE :queryableName OR (:queryableName IS NULL OR LENGTH(:queryableName) = 0))
ORDER BY picked ASC, needed DESC, position ASC;

pickedCategoriesCount:
SELECT count(*) FROM category WHERE deleted IS NULL AND needed = 1 AND id IN (SELECT categoryId FROM item WHERE invoiceId IS NULL);

remainedCategoriesCount:
SELECT count(*) FROM category WHERE deleted IS NULL AND needed = 1 AND id NOT IN (SELECT categoryId FROM item WHERE invoiceId IS NULL);

softDelete:
UPDATE category SET deleted = unixepoch(), updated = unixepoch() WHERE id IN :ids;

hardDelete:
DELETE FROM category WHERE id IN :ids;

needed:
SELECT * FROM category WHERE needed = 1;

picked:
UPDATE category SET needed = 0, updated = unixepoch() WHERE id IN :ids;

summaryReport:
SELECT count(*) FROM category WHERE deleted IS NULL AND needed = 1 AND id IN (SELECT categoryId FROM item WHERE invoiceId IS NULL)
UNION
SELECT count(*) FROM category WHERE deleted IS NULL AND needed = 1 AND id NOT IN (SELECT categoryId FROM item WHERE invoiceId IS NULL);